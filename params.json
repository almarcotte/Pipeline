{"name":"Pipeline","tagline":"Pipeline allows to easily chain operations / tasks on the fly or create a reusable chain of commands.","body":"## Overview\r\n\r\nPipeline allows the creation of reusable chains of tasks through which data can be processed. It is, in a way, an implementation of [function composition](https://en.wikipedia.org/wiki/Function_composition).\r\n\r\nIt can be used to filter data using simple, self-contained rules, to apply multiple operations on data or to feed data to multiple processes in a row.\r\n\r\n## Installation\r\n\r\n### Using Composer\r\n\r\n```\r\ncomposer require gnumast/pipeline\r\n```\r\n\r\n### Manually\r\n\r\nManual installation is not recommended but the library is simple enough that it isn't too complicated. Download an archive version using git:\r\n\r\n```\r\ngit archive --format zip --output \"pipeline.zip\" https://github.com/gnumast/Pipeline.git -0\r\n```\r\n\r\nextract and copy the content of `src` into your own application. Alternatively, you can grab a zip on the [Github](https://github.com/gnumast/pipeline) page for the project.\r\n\r\n## Creating Tasks\r\n\r\nThere are 2 main ways of creating a task: implementing `TaskInterface` or using `CallableTask` as a wrapper to an anonymous function.\r\n\r\n### Extending `TaskInterface`\r\n\r\nSuggested for reusable tasks, any class extending `TaskInterface` can be used in a pipe. The only method that needs to be implemented is `run($data)` which should return, at the very least, its input.\r\n\r\n```php\r\n/**\r\n * This task does absolutely nothing\r\n */\r\nclass UselessTask implements TaskInterface {\r\n    public function run($data) {\r\n        return $data;\r\n    }\r\n}\r\n```\r\n\r\nThe return value of the `run()` method is passed to the next task in line when it completes and as such is required.\r\n\r\n### Using callable\r\n\r\nThe class `CallableTask` provides a wrapper to callables to be used as tasks. Its constructor takes any callable as a parameter, which is then invoked when needed. This is useful when creating tasks with little to no use outside of the current situation.\r\n\r\n```php\r\n$myTask = new CallableTask(function($number) { return $number + 100; });\r\n```\r\n\r\n## Creating Pipelines\r\n\r\nA pipeline is nothing but a ordered list of tasks. There are 2 main ways to add tasks to a pipeline: in its constructor or using the `add` method on an existing pipeline object. Both of the examples below give the same result:\r\n\r\n```php\r\n$pipe = new Pipeline(\r\n    new CallableTask(function($x) { return 2 * $x; }),\r\n    new CallableTask(function($x) { return $x - 10; })\r\n);\r\n```\r\n\r\n```php\r\n$pipe = new Pipeline();\r\n$pipe->add(new CallableTask(function($x) { return 2 * $x; }));\r\n$pipe->add(new CallableTask(function($x) { return $x - 10; }));\r\n```\r\n\r\n## Processing\r\n\r\nOnce a pipeline is created, the `process()` method is used to send data through to be processed by all the tasks.\r\n\r\n## Basic usage\r\n\r\nHere's a trivial example.\r\n\r\n```php\r\nclass MakeAllCaps implements TaskInterface {\r\n    public function run($data) {\r\n        return mb_strtoupper($data);\r\n    }\r\n}\r\n\r\nclass RemoveAllSpaces implements TaskInterface {\r\n    public function run($data) {\r\n        return str_replace(' ', '', $data);\r\n    }\r\n}\r\n\r\n$pipeline = new Pipeline(\r\n    new MakeAllCaps(),\r\n    new RemoveAllSpaces()\r\n);\r\n$pipeline->execute(\"Hello, my name is Steve\"); // HELLO,MYNAMEISSTEVE\r\n```\r\n\r\nFor simple chains where defining a brand new class isn't really worth it, or if you quickly want to chain things\r\ntogether, the ``CallablePipe`` class wraps anonymous functions to be passed as pipes.\r\n\r\n```php\r\n$pipeline = new Pipeline(\r\n    new CallablePipe(function($data) {\r\nreturn $data * 10;\r\n    }),\r\n    new CallablePipe(function($data) {\r\nreturn $data + 50;\r\n    })\r\n);\r\n\r\n$result = $pipeline->execute(10); // 150\r\n```\r\n\r\nYou don't have to pass all of your tasks at initialisation time. ``Pipeline`` provides an ``add`` method to add steps\r\n to an existing object:\r\n\r\n```php\r\n$pipeline = new Pipeline(new MakeAllCaps());\r\n$pipeline->add(new RemoveAllSpaces());\r\n$pipeline->execute(\"Hello, world!\"); // HELLO,WORLD!\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}