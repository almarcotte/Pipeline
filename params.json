{"name":"Pipeline","tagline":"Pipeline allows to easily chain operations / tasks on the fly or create a reusable chain of commands.","body":"## Basic usage\r\n\r\nHere's a trivial example.\r\n\r\n```php\r\nclass MakeAllCaps implements TaskInterface {\r\n    public function run($data) {\r\n        return mb_strtoupper($data);\r\n    }\r\n}\r\n\r\nclass RemoveAllSpaces implements TaskInterface {\r\n    public function run($data) {\r\n        return str_replace(' ', '', $data);\r\n    }\r\n}\r\n\r\n$pipeline = new Pipeline(\r\n    new MakeAllCaps(),\r\n    new RemoveAllSpaces()\r\n);\r\n$pipeline->execute(\"Hello, my name is Steve\"); // HELLO,MYNAMEISSTEVE\r\n```\r\n\r\nFor simple chains where defining a brand new class isn't really worth it, or if you quickly want to chain things\r\ntogether, the ``CallablePipe`` class wraps anonymous functions to be passed as pipes.\r\n\r\n```php\r\n$pipeline = new Pipeline(\r\n    new CallablePipe(function($data) {\r\nreturn $data * 10;\r\n    }),\r\n    new CallablePipe(function($data) {\r\nreturn $data + 50;\r\n    })\r\n);\r\n\r\n$result = $pipeline->execute(10); // 150\r\n```\r\n\r\nYou don't have to pass all of your tasks at initialisation time. ``Pipeline`` provides an ``add`` method to add steps\r\n to an existing object:\r\n\r\n```php\r\n$pipeline = new Pipeline(new MakeAllCaps());\r\n$pipeline->add(new RemoveAllSpaces());\r\n$pipeline->execute(\"Hello, world!\"); // HELLO,WORLD!\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}